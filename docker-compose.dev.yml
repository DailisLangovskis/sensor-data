version: '3.3'

services:

    sensor-data:
        container_name: sensor-data-ui
        build:           
            context: .
            dockerfile: docker/Dockerfile
        image: sensor-data-ui:latest
        env_file:
            - .env  
        ports: #Forwarded from host to docker container
            - ${HTTP_PORT}:${HTTP_PORT} # main application
        depends_on:
            - reverse-proxy
            - rest-api
        volumes:
            - "./config.js:/code/config.js"
            - "./src:/code/src"
            - "./static:/code/static"
            - "./node_modules:/code/node_modules"
            - "./package.json:/code/package.json"
            #Execute npm link in hslayers-ng repo and then npm link hslayers-ng in this repo
            - "${HSLPATH}:/code/node_modules/hslayers-ng" 
        command: > 
            npm run dev-server
    sensor-data-proxy:
        container_name: sensor-data-proxy
        image: sensor-data-ui:latest
        env_file:
            - .env
        ports: #Forwarded from host to docker container
             - ${PROXY_PORT}:${PROXY_PORT} # proxy service
        command: >
            npm run proxy
    rest-api:
        container_name: rest-api
        build:
            context: ./restAPI
            dockerfile: Dockerfile
        image: rest-api:latest
        
        env_file:
            - .env
        ports:
            - ${API_PORT}:${API_PORT} # rest api service
        depends_on:
            - sensor-data-db
        volumes:
            - "./restAPI:/code/restAPI"
        command: >
            npm run serve-api
    sensor-data-db:
        container_name: sensor-data-db
        build:           
            context: ./postgresql
            dockerfile: Dockerfile
        image: sensor-data-db:latest
        volumes:
            - sensordb:/var/lib/postgresql/data
            - ./postgresql/code:/code
        container_name: sensor-data-db 
        environment:
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            POSTGRES_DB: ${POSTGRES_DB}
            POSTGRES_PORT: $POSTGRES_PORT}
        restart: always
    geoserver:
        build:
            context: geoserver/docker
            dockerfile: Dockerfile
        volumes:
            - ./geoserver/data_dir:/opt/geoserver/data_dir
            - ./geoserver/docker/code:/geoserver_code
            - ./geoserver:/geoserver_tmp
        restart: on-failure
        ports:
            - ${GS_PORT}:${GS_PORT}
        environment:
            - GS_VERSION=2.13.0
        env_file:
            - geoserver/docker/.env
        depends_on:
            - sensor-data-db
    reverse-proxy:
        container_name: reverse-proxy
        build:           
            context: .
            dockerfile: docker/Dockerfile.nginx
        image: reverse-proxy:latest
        env_file:
             - .env
        volumes:
            - ./nginx.conf:/etc/nginx/sites-available/default.conf
        ports:
            - ${NGINX_PORT}:80
volumes: 
    sensordb:

              
